package com.freelancewatermelon.twitterclientapp.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TWEETS".
*/
public class TweetsDao extends AbstractDao<Tweets, Long> {

    public static final String TABLENAME = "TWEETS";

    /**
     * Properties of entity Tweets.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Tweet_username = new Property(1, String.class, "tweet_username", false, "TWEET_USERNAME");
        public final static Property Tweet_text = new Property(2, String.class, "tweet_text", false, "TWEET_TEXT");
        public final static Property Tweet_user_img = new Property(3, String.class, "tweet_user_img", false, "TWEET_USER_IMG");
        public final static Property Tweet_time = new Property(4, String.class, "tweet_time", false, "TWEET_TIME");
        public final static Property Tweet_text_image = new Property(5, String.class, "tweet_text_image", false, "TWEET_TEXT_IMAGE");
    }


    public TweetsDao(DaoConfig config) {
        super(config);
    }
    
    public TweetsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TWEETS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TWEET_USERNAME\" TEXT NOT NULL ," + // 1: tweet_username
                "\"TWEET_TEXT\" TEXT," + // 2: tweet_text
                "\"TWEET_USER_IMG\" TEXT," + // 3: tweet_user_img
                "\"TWEET_TIME\" TEXT," + // 4: tweet_time
                "\"TWEET_TEXT_IMAGE\" TEXT);"); // 5: tweet_text_image
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TWEETS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Tweets entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTweet_username());
 
        String tweet_text = entity.getTweet_text();
        if (tweet_text != null) {
            stmt.bindString(3, tweet_text);
        }
 
        String tweet_user_img = entity.getTweet_user_img();
        if (tweet_user_img != null) {
            stmt.bindString(4, tweet_user_img);
        }
 
        String tweet_time = entity.getTweet_time();
        if (tweet_time != null) {
            stmt.bindString(5, tweet_time);
        }
 
        String tweet_text_image = entity.getTweet_text_image();
        if (tweet_text_image != null) {
            stmt.bindString(6, tweet_text_image);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Tweets entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTweet_username());
 
        String tweet_text = entity.getTweet_text();
        if (tweet_text != null) {
            stmt.bindString(3, tweet_text);
        }
 
        String tweet_user_img = entity.getTweet_user_img();
        if (tweet_user_img != null) {
            stmt.bindString(4, tweet_user_img);
        }
 
        String tweet_time = entity.getTweet_time();
        if (tweet_time != null) {
            stmt.bindString(5, tweet_time);
        }
 
        String tweet_text_image = entity.getTweet_text_image();
        if (tweet_text_image != null) {
            stmt.bindString(6, tweet_text_image);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Tweets readEntity(Cursor cursor, int offset) {
        Tweets entity = new Tweets( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // tweet_username
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // tweet_text
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // tweet_user_img
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // tweet_time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // tweet_text_image
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Tweets entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTweet_username(cursor.getString(offset + 1));
        entity.setTweet_text(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTweet_user_img(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTweet_time(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTweet_text_image(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Tweets entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Tweets entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Tweets entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
